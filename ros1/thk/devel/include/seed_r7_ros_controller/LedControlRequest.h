// Generated by gencpp from file seed_r7_ros_controller/LedControlRequest.msg
// DO NOT EDIT!


#ifndef SEED_R7_ROS_CONTROLLER_MESSAGE_LEDCONTROLREQUEST_H
#define SEED_R7_ROS_CONTROLLER_MESSAGE_LEDCONTROLREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace seed_r7_ros_controller
{
template <class ContainerAllocator>
struct LedControlRequest_
{
  typedef LedControlRequest_<ContainerAllocator> Type;

  LedControlRequest_()
    : send_number(0)
    , script_number(0)  {
    }
  LedControlRequest_(const ContainerAllocator& _alloc)
    : send_number(0)
    , script_number(0)  {
  (void)_alloc;
    }



   typedef uint8_t _send_number_type;
  _send_number_type send_number;

   typedef uint16_t _script_number_type;
  _script_number_type script_number;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(FRONT_RIGHT)
  #undef FRONT_RIGHT
#endif
#if defined(_WIN32) && defined(REAR_RIGHT)
  #undef REAR_RIGHT
#endif
#if defined(_WIN32) && defined(FRONT_LEFT)
  #undef FRONT_LEFT
#endif
#if defined(_WIN32) && defined(REAR_LEFT)
  #undef REAR_LEFT
#endif

  enum {
    FRONT_RIGHT = 3u,
    REAR_RIGHT = 4u,
    FRONT_LEFT = 5u,
    REAR_LEFT = 6u,
  };


  typedef boost::shared_ptr< ::seed_r7_ros_controller::LedControlRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::seed_r7_ros_controller::LedControlRequest_<ContainerAllocator> const> ConstPtr;

}; // struct LedControlRequest_

typedef ::seed_r7_ros_controller::LedControlRequest_<std::allocator<void> > LedControlRequest;

typedef boost::shared_ptr< ::seed_r7_ros_controller::LedControlRequest > LedControlRequestPtr;
typedef boost::shared_ptr< ::seed_r7_ros_controller::LedControlRequest const> LedControlRequestConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::seed_r7_ros_controller::LedControlRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::seed_r7_ros_controller::LedControlRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::seed_r7_ros_controller::LedControlRequest_<ContainerAllocator1> & lhs, const ::seed_r7_ros_controller::LedControlRequest_<ContainerAllocator2> & rhs)
{
  return lhs.send_number == rhs.send_number &&
    lhs.script_number == rhs.script_number;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::seed_r7_ros_controller::LedControlRequest_<ContainerAllocator1> & lhs, const ::seed_r7_ros_controller::LedControlRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace seed_r7_ros_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::seed_r7_ros_controller::LedControlRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::seed_r7_ros_controller::LedControlRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::seed_r7_ros_controller::LedControlRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::seed_r7_ros_controller::LedControlRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::seed_r7_ros_controller::LedControlRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::seed_r7_ros_controller::LedControlRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::seed_r7_ros_controller::LedControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "98812974496e4f17880aff57e170a1c5";
  }

  static const char* value(const ::seed_r7_ros_controller::LedControlRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x98812974496e4f17ULL;
  static const uint64_t static_value2 = 0x880aff57e170a1c5ULL;
};

template<class ContainerAllocator>
struct DataType< ::seed_r7_ros_controller::LedControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "seed_r7_ros_controller/LedControlRequest";
  }

  static const char* value(const ::seed_r7_ros_controller::LedControlRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::seed_r7_ros_controller::LedControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 send_number\n"
"uint8 FRONT_RIGHT = 3\n"
"uint8 REAR_RIGHT = 4\n"
"uint8 FRONT_LEFT = 5\n"
"uint8 REAR_LEFT = 6\n"
"\n"
"uint16 script_number \n"
;
  }

  static const char* value(const ::seed_r7_ros_controller::LedControlRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::seed_r7_ros_controller::LedControlRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.send_number);
      stream.next(m.script_number);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LedControlRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::seed_r7_ros_controller::LedControlRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::seed_r7_ros_controller::LedControlRequest_<ContainerAllocator>& v)
  {
    s << indent << "send_number: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.send_number);
    s << indent << "script_number: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.script_number);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEED_R7_ROS_CONTROLLER_MESSAGE_LEDCONTROLREQUEST_H
